<?php

// phpcs:ignoreFile
// this file is auto-generated by prolic/fpp
// don't edit this file manually

declare(strict_types=1);

namespace BolCom\RetailerApi\Model\Offer;

final class Store
{
    private $productTitle;
    private $visible;

    /**
     * @param \BolCom\RetailerApi\Model\Offer\Title|null $productTitle
     * @param \BolCom\RetailerApi\Model\Offer\CountryCode[]|null $visible
     */
    public function __construct(?Title $productTitle = null, ?array $visible = null)
    {
        $this->productTitle = $productTitle;
        if ($visible !== null) {
            $this->visible = [];
            foreach ($visible as $__value) {
                if (! $__value instanceof \BolCom\RetailerApi\Model\Offer\CountryCode) {
                    throw new \InvalidArgumentException('visible expected an array of BolCom\RetailerApi\Model\Offer\CountryCode');
                }
                $this->visible[] = $__value;
            }
        }
    }

    public function productTitle(): ?Title
    {
        return $this->productTitle;
    }

    /**
     * @return \BolCom\RetailerApi\Model\Offer\CountryCode[]|null
     */
    public function visible(): ?array
    {
        return $this->visible;
    }

    public function withProductTitle(?Title $productTitle = null): Store
    {
        return new self($productTitle, $this->visible);
    }

    /**
     * @param \BolCom\RetailerApi\Model\Offer\CountryCode[]|null $visible
     * @return \BolCom\RetailerApi\Model\Offer\Store
     */
    public function withVisible(?array $visible = null): Store
    {
        return new self($this->productTitle, $visible);
    }

    public static function fromArray(array $data): Store
    {
        if (isset($data['productTitle'])) {
            if (! \is_string($data['productTitle'])) {
                throw new \InvalidArgumentException("Value for 'productTitle' is not a string in data array");
            }

            $productTitle = Title::fromString($data['productTitle']);
        } else {
            $productTitle = null;
        }

        if (isset($data['visible'])) {
            if (! \is_array($data['visible'])) {
                throw new \InvalidArgumentException("Value for 'visible' is not an array in data array");
            }

            $visible = [];

            foreach ($data['visible'] as $__value) {
                if (! \is_array($__value)) {
                    throw new \InvalidArgumentException("Key 'visible' in data array or is not an array of arrays");
                }

                $visible[] = CountryCode::fromArray($__value);
            }
        } else {
            $visible = null;
        }

        return new self($productTitle, $visible);
    }

    public function toArray(): array
    {
         $visible = null;

        if (null !== $this->visible) {
            foreach ($this->visible as $__value) {
                $visible[] = $__value->toArray();
            }
        }

        return [
            'productTitle' => null === $this->productTitle ? null : $this->productTitle->toString(),
            'visible' => $visible,
        ];
    }
}
